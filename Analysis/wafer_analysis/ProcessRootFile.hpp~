#include <iostream>
#include <fstream>
#include <string>

struct Data
{
  std::vector<double> x;
  std::vector<double> y;
  TString padName;
  TString graphName;
};

Data ProcessRootFile(TString fileName, TString padName, TString graphName, int i)
{
  Data data;
  //Define file path
  TString filePrefix = "../wafer/";
  TString fileSuffix = ".root";
  TString filePath = filePrefix+fileName+fileSuffix;

  //Open file and draw
  TFile *file = TFile::Open(filePath);
  TCanvas *ADCScanCanvas = (TCanvas *)file->Get("ADCScanCanvas");
  if(ADCScanCanvas == NULL){std::cout<<"Canvas is null..."<<std::endl; return data;}
  ADCScanCanvas->Draw();
  //if(i==0){ADCScanCanvas->ls();}
  
  //Extract TGraph values from pad 		      
  TPad *mypad = (TPad*)ADCScanCanvas->GetPrimitive("pad_plot");
  TPad *mysubpad = (TPad*)mypad->GetPrimitive(padName);
  //mysubpad1->ls();
  TGraphErrors *myTGraph = (TGraphErrors*)mysubpad->GetPrimitive(graphName);
  // std::cout<<"==============================="<<std::endl;
  // std::cout<<padName<<"\t"<<graphName<<std::endl;
  // std::cout<<"==============================="<<std::endl;
  for(int i = 0; i < myTGraph->GetN();++i)
    {
      double x,y;
      myTGraph->GetPoint(i,x,y);
      data.x.push_back(x);
      data.y.push_back(y);
      //std::cout<<x<<"\t"<<y<<std::endl;
    }

  //Extract header from pad
  TPad *header = (TPad*)ADCScanCanvas->GetPrimitive("pad_header");
  TPaveText *headerpave = (TPaveText*)header->GetPrimitive("TPave");
  auto headertext = headerpave->GetLine(0);
  TString padTitle = headertext->GetTitle();
  std::cout<<padTitle<<std::endl;
    
  data.padName = padName;
  data.graphName = graphName;
  ADCScanCanvas->Close();
  file->Close();
  return data;
}
